{"ast":null,"code":"import _asyncToGenerator from \"/home/will/code-converter/code-converter-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/will/code-converter/code-converter-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nconst _c0 = [\"ref\"];\nfunction normalizeLineEndings(str) {\n  if (!str) {\n    return str;\n  }\n  return str.replace(/\\r\\n|\\r/g, '\\n');\n}\nclass CodemirrorComponent {\n  /**\n   * set options for codemirror\n   * @link http://codemirror.net/doc/manual.html#config\n   */\n  set options(value) {\n    this._options = value;\n    if (!this._differ && value) {\n      this._differ = this._differs.find(value).create();\n    }\n  }\n  /* preserve previous scroll position after updating value */\n\n  constructor(_differs, _ngZone) {\n    _defineProperty(this, \"_differs\", void 0);\n    _defineProperty(this, \"_ngZone\", void 0);\n    /* class applied to the created textarea */\n    _defineProperty(this, \"className\", '');\n    /* name applied to the created textarea */\n    _defineProperty(this, \"name\", 'codemirror');\n    /* autofocus setting applied to the created textarea */\n    _defineProperty(this, \"autoFocus\", false);\n    _defineProperty(this, \"preserveScrollPosition\", false);\n    /* called when the text cursor is moved */\n    _defineProperty(this, \"cursorActivity\", new EventEmitter());\n    /* called when the editor is focused or loses focus */\n    _defineProperty(this, \"focusChange\", new EventEmitter());\n    /* called when the editor is scrolled */\n    // eslint-disable-next-line @angular-eslint/no-output-native\n    _defineProperty(this, \"scroll\", new EventEmitter());\n    /* called when file(s) are dropped */\n    // eslint-disable-next-line @angular-eslint/no-output-native\n    _defineProperty(this, \"drop\", new EventEmitter());\n    /* called when codeMirror instance is initiated on the component */\n    _defineProperty(this, \"codeMirrorLoaded\", new EventEmitter());\n    _defineProperty(this, \"ref\", void 0);\n    _defineProperty(this, \"value\", '');\n    _defineProperty(this, \"disabled\", false);\n    _defineProperty(this, \"isFocused\", false);\n    _defineProperty(this, \"codeMirror\", void 0);\n    /**\n     * either global variable or required library\n     */\n    _defineProperty(this, \"_codeMirror\", void 0);\n    _defineProperty(this, \"_differ\", void 0);\n    _defineProperty(this, \"_options\", void 0);\n    /** Implemented as part of ControlValueAccessor. */\n    _defineProperty(this, \"onChange\", _ => {});\n    /** Implemented as part of ControlValueAccessor. */\n    _defineProperty(this, \"onTouched\", () => {});\n    this._differs = _differs;\n    this._ngZone = _ngZone;\n  }\n  get codeMirrorGlobal() {\n    if (this._codeMirror) {\n      return this._codeMirror;\n    }\n    // in order to allow for universal rendering, we import Codemirror runtime with `require` to prevent node errors\n    this._codeMirror = typeof CodeMirror !== 'undefined' ? CodeMirror : import('codemirror');\n    return this._codeMirror;\n  }\n  ngAfterViewInit() {\n    var _this = this;\n    this._ngZone.runOutsideAngular( /*#__PURE__*/_asyncToGenerator(function* () {\n      const codeMirrorObj = yield _this.codeMirrorGlobal;\n      const codeMirror = codeMirrorObj?.default ? codeMirrorObj.default : codeMirrorObj;\n      _this.codeMirror = codeMirror.fromTextArea(_this.ref.nativeElement, _this._options);\n      _this.codeMirror.on('cursorActivity', cm => _this._ngZone.run(() => _this.cursorActive(cm)));\n      _this.codeMirror.on('scroll', _this.scrollChanged.bind(_this));\n      _this.codeMirror.on('blur', () => _this._ngZone.run(() => _this.focusChanged(false)));\n      _this.codeMirror.on('focus', () => _this._ngZone.run(() => _this.focusChanged(true)));\n      _this.codeMirror.on('change', (cm, change) => _this._ngZone.run(() => _this.codemirrorValueChanged(cm, change)));\n      _this.codeMirror.on('drop', (cm, e) => {\n        _this._ngZone.run(() => _this.dropFiles(cm, e));\n      });\n      _this.codeMirror.setValue(_this.value);\n      _this.codeMirrorLoaded.emit(_this);\n    }));\n  }\n  ngDoCheck() {\n    if (!this._differ) {\n      return;\n    }\n    // check options have not changed\n    const changes = this._differ.diff(this._options);\n    if (changes) {\n      changes.forEachChangedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n      changes.forEachAddedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n      changes.forEachRemovedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n    }\n  }\n  ngOnDestroy() {\n    // is there a lighter-weight way to remove the cm instance?\n    if (this.codeMirror) {\n      this.codeMirror.toTextArea();\n    }\n  }\n  codemirrorValueChanged(cm, change) {\n    const cmVal = cm.getValue();\n    if (this.value !== cmVal) {\n      this.value = cmVal;\n      this.onChange(this.value);\n    }\n  }\n  setOptionIfChanged(optionName, newValue) {\n    if (!this.codeMirror) {\n      return;\n    }\n    // cast to any to handle strictly typed option names\n    // could possibly import settings strings available in the future\n    this.codeMirror.setOption(optionName, newValue);\n  }\n  focusChanged(focused) {\n    this.onTouched();\n    this.isFocused = focused;\n    this.focusChange.emit(focused);\n  }\n  scrollChanged(cm) {\n    this.scroll.emit(cm.getScrollInfo());\n  }\n  cursorActive(cm) {\n    this.cursorActivity.emit(cm);\n  }\n  dropFiles(cm, e) {\n    this.drop.emit([cm, e]);\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value) {\n    if (value === null || value === undefined) {\n      return;\n    }\n    if (!this.codeMirror) {\n      this.value = value;\n      return;\n    }\n    const cur = this.codeMirror.getValue();\n    if (value !== cur && normalizeLineEndings(cur) !== normalizeLineEndings(value)) {\n      this.value = value;\n      if (this.preserveScrollPosition) {\n        const prevScrollPosition = this.codeMirror.getScrollInfo();\n        this.codeMirror.setValue(this.value);\n        this.codeMirror.scrollTo(prevScrollPosition.left, prevScrollPosition.top);\n      } else {\n        this.codeMirror.setValue(this.value);\n      }\n    }\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.setOptionIfChanged('readOnly', this.disabled);\n  }\n}\n_defineProperty(CodemirrorComponent, \"\\u0275fac\", function CodemirrorComponent_Factory(t) {\n  return new (t || CodemirrorComponent)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i0.NgZone));\n});\n_defineProperty(CodemirrorComponent, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CodemirrorComponent,\n  selectors: [[\"ngx-codemirror\"]],\n  viewQuery: function CodemirrorComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ref = _t.first);\n    }\n  },\n  inputs: {\n    className: \"className\",\n    name: \"name\",\n    autoFocus: \"autoFocus\",\n    options: \"options\",\n    preserveScrollPosition: \"preserveScrollPosition\"\n  },\n  outputs: {\n    cursorActivity: \"cursorActivity\",\n    focusChange: \"focusChange\",\n    scroll: \"scroll\",\n    drop: \"drop\",\n    codeMirrorLoaded: \"codeMirrorLoaded\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CodemirrorComponent),\n    multi: true\n  }])],\n  decls: 3,\n  vars: 7,\n  consts: [[\"autocomplete\", \"off\", 3, \"name\", \"autofocus\"], [\"ref\", \"\"]],\n  template: function CodemirrorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"textarea\", 0, 1);\n      i0.ɵɵtext(2, \"    \");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵclassMapInterpolate1(\"ngx-codemirror \", ctx.className, \"\");\n      i0.ɵɵclassProp(\"ngx-codemirror--focused\", ctx.isFocused);\n      i0.ɵɵproperty(\"name\", ctx.name)(\"autofocus\", ctx.autoFocus);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodemirrorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-codemirror',\n      template: `\n    <textarea\n      [name]=\"name\"\n      class=\"ngx-codemirror {{ className }}\"\n      [class.ngx-codemirror--focused]=\"isFocused\"\n      autocomplete=\"off\"\n      [autofocus]=\"autoFocus\"\n      #ref\n    >\n    </textarea>\n  `,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CodemirrorComponent),\n        multi: true\n      }],\n      preserveWhitespaces: false,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.KeyValueDiffers\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    className: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    autoFocus: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    preserveScrollPosition: [{\n      type: Input\n    }],\n    cursorActivity: [{\n      type: Output\n    }],\n    focusChange: [{\n      type: Output\n    }],\n    scroll: [{\n      type: Output\n    }],\n    drop: [{\n      type: Output\n    }],\n    codeMirrorLoaded: [{\n      type: Output\n    }],\n    ref: [{\n      type: ViewChild,\n      args: ['ref']\n    }]\n  });\n})();\nclass CodemirrorModule {}\n_defineProperty(CodemirrorModule, \"\\u0275fac\", function CodemirrorModule_Factory(t) {\n  return new (t || CodemirrorModule)();\n});\n_defineProperty(CodemirrorModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CodemirrorModule\n}));\n_defineProperty(CodemirrorModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodemirrorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CodemirrorComponent],\n      declarations: [CodemirrorComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CodemirrorComponent, CodemirrorModule };","map":{"version":3,"names":["i0","EventEmitter","forwardRef","Component","ChangeDetectionStrategy","Input","Output","ViewChild","NgModule","NG_VALUE_ACCESSOR","_c0","normalizeLineEndings","str","replace","CodemirrorComponent","options","value","_options","_differ","_differs","find","create","constructor","_ngZone","_defineProperty","_","codeMirrorGlobal","_codeMirror","CodeMirror","ngAfterViewInit","_this","runOutsideAngular","_asyncToGenerator","codeMirrorObj","codeMirror","default","fromTextArea","ref","nativeElement","on","cm","run","cursorActive","scrollChanged","bind","focusChanged","change","codemirrorValueChanged","e","dropFiles","setValue","codeMirrorLoaded","emit","ngDoCheck","changes","diff","forEachChangedItem","option","setOptionIfChanged","key","currentValue","forEachAddedItem","forEachRemovedItem","ngOnDestroy","toTextArea","cmVal","getValue","onChange","optionName","newValue","setOption","focused","onTouched","isFocused","focusChange","scroll","getScrollInfo","cursorActivity","drop","writeValue","undefined","cur","preserveScrollPosition","prevScrollPosition","scrollTo","left","top","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","CodemirrorComponent_Factory","t","ɵɵdirectiveInject","KeyValueDiffers","NgZone","ɵɵdefineComponent","type","selectors","viewQuery","CodemirrorComponent_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","className","name","autoFocus","outputs","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","CodemirrorComponent_Template","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵclassMapInterpolate1","ɵɵclassProp","ɵɵproperty","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","providers","preserveWhitespaces","OnPush","CodemirrorModule","CodemirrorModule_Factory","ɵɵdefineNgModule","ɵɵdefineInjector","exports","declarations"],"sources":["/home/will/code-converter/code-converter-frontend/node_modules/@ctrl/ngx-codemirror/fesm2022/ctrl-ngx-codemirror.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nfunction normalizeLineEndings(str) {\n    if (!str) {\n        return str;\n    }\n    return str.replace(/\\r\\n|\\r/g, '\\n');\n}\nclass CodemirrorComponent {\n    _differs;\n    _ngZone;\n    /* class applied to the created textarea */\n    className = '';\n    /* name applied to the created textarea */\n    name = 'codemirror';\n    /* autofocus setting applied to the created textarea */\n    autoFocus = false;\n    /**\n     * set options for codemirror\n     * @link http://codemirror.net/doc/manual.html#config\n     */\n    set options(value) {\n        this._options = value;\n        if (!this._differ && value) {\n            this._differ = this._differs.find(value).create();\n        }\n    }\n    /* preserve previous scroll position after updating value */\n    preserveScrollPosition = false;\n    /* called when the text cursor is moved */\n    cursorActivity = new EventEmitter();\n    /* called when the editor is focused or loses focus */\n    focusChange = new EventEmitter();\n    /* called when the editor is scrolled */\n    // eslint-disable-next-line @angular-eslint/no-output-native\n    scroll = new EventEmitter();\n    /* called when file(s) are dropped */\n    // eslint-disable-next-line @angular-eslint/no-output-native\n    drop = new EventEmitter();\n    /* called when codeMirror instance is initiated on the component */\n    codeMirrorLoaded = new EventEmitter();\n    ref;\n    value = '';\n    disabled = false;\n    isFocused = false;\n    codeMirror;\n    /**\n     * either global variable or required library\n     */\n    _codeMirror;\n    _differ;\n    _options;\n    constructor(_differs, _ngZone) {\n        this._differs = _differs;\n        this._ngZone = _ngZone;\n    }\n    get codeMirrorGlobal() {\n        if (this._codeMirror) {\n            return this._codeMirror;\n        }\n        // in order to allow for universal rendering, we import Codemirror runtime with `require` to prevent node errors\n        this._codeMirror = typeof CodeMirror !== 'undefined' ? CodeMirror : import('codemirror');\n        return this._codeMirror;\n    }\n    ngAfterViewInit() {\n        this._ngZone.runOutsideAngular(async () => {\n            const codeMirrorObj = await this.codeMirrorGlobal;\n            const codeMirror = codeMirrorObj?.default ? codeMirrorObj.default : codeMirrorObj;\n            this.codeMirror = codeMirror.fromTextArea(this.ref.nativeElement, this._options);\n            this.codeMirror.on('cursorActivity', cm => this._ngZone.run(() => this.cursorActive(cm)));\n            this.codeMirror.on('scroll', this.scrollChanged.bind(this));\n            this.codeMirror.on('blur', () => this._ngZone.run(() => this.focusChanged(false)));\n            this.codeMirror.on('focus', () => this._ngZone.run(() => this.focusChanged(true)));\n            this.codeMirror.on('change', (cm, change) => this._ngZone.run(() => this.codemirrorValueChanged(cm, change)));\n            this.codeMirror.on('drop', (cm, e) => {\n                this._ngZone.run(() => this.dropFiles(cm, e));\n            });\n            this.codeMirror.setValue(this.value);\n            this.codeMirrorLoaded.emit(this);\n        });\n    }\n    ngDoCheck() {\n        if (!this._differ) {\n            return;\n        }\n        // check options have not changed\n        const changes = this._differ.diff(this._options);\n        if (changes) {\n            changes.forEachChangedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n            changes.forEachAddedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n            changes.forEachRemovedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n        }\n    }\n    ngOnDestroy() {\n        // is there a lighter-weight way to remove the cm instance?\n        if (this.codeMirror) {\n            this.codeMirror.toTextArea();\n        }\n    }\n    codemirrorValueChanged(cm, change) {\n        const cmVal = cm.getValue();\n        if (this.value !== cmVal) {\n            this.value = cmVal;\n            this.onChange(this.value);\n        }\n    }\n    setOptionIfChanged(optionName, newValue) {\n        if (!this.codeMirror) {\n            return;\n        }\n        // cast to any to handle strictly typed option names\n        // could possibly import settings strings available in the future\n        this.codeMirror.setOption(optionName, newValue);\n    }\n    focusChanged(focused) {\n        this.onTouched();\n        this.isFocused = focused;\n        this.focusChange.emit(focused);\n    }\n    scrollChanged(cm) {\n        this.scroll.emit(cm.getScrollInfo());\n    }\n    cursorActive(cm) {\n        this.cursorActivity.emit(cm);\n    }\n    dropFiles(cm, e) {\n        this.drop.emit([cm, e]);\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        if (value === null || value === undefined) {\n            return;\n        }\n        if (!this.codeMirror) {\n            this.value = value;\n            return;\n        }\n        const cur = this.codeMirror.getValue();\n        if (value !== cur && normalizeLineEndings(cur) !== normalizeLineEndings(value)) {\n            this.value = value;\n            if (this.preserveScrollPosition) {\n                const prevScrollPosition = this.codeMirror.getScrollInfo();\n                this.codeMirror.setValue(this.value);\n                this.codeMirror.scrollTo(prevScrollPosition.left, prevScrollPosition.top);\n            }\n            else {\n                this.codeMirror.setValue(this.value);\n            }\n        }\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.setOptionIfChanged('readOnly', this.disabled);\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    onChange = (_) => { };\n    /** Implemented as part of ControlValueAccessor. */\n    onTouched = () => { };\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: CodemirrorComponent, deps: [{ token: i0.KeyValueDiffers }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.1\", type: CodemirrorComponent, selector: \"ngx-codemirror\", inputs: { className: \"className\", name: \"name\", autoFocus: \"autoFocus\", options: \"options\", preserveScrollPosition: \"preserveScrollPosition\" }, outputs: { cursorActivity: \"cursorActivity\", focusChange: \"focusChange\", scroll: \"scroll\", drop: \"drop\", codeMirrorLoaded: \"codeMirrorLoaded\" }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => CodemirrorComponent),\n                multi: true,\n            },\n        ], viewQueries: [{ propertyName: \"ref\", first: true, predicate: [\"ref\"], descendants: true }], ngImport: i0, template: `\n    <textarea\n      [name]=\"name\"\n      class=\"ngx-codemirror {{ className }}\"\n      [class.ngx-codemirror--focused]=\"isFocused\"\n      autocomplete=\"off\"\n      [autofocus]=\"autoFocus\"\n      #ref\n    >\n    </textarea>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: CodemirrorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-codemirror',\n                    template: `\n    <textarea\n      [name]=\"name\"\n      class=\"ngx-codemirror {{ className }}\"\n      [class.ngx-codemirror--focused]=\"isFocused\"\n      autocomplete=\"off\"\n      [autofocus]=\"autoFocus\"\n      #ref\n    >\n    </textarea>\n  `,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => CodemirrorComponent),\n                            multi: true,\n                        },\n                    ],\n                    preserveWhitespaces: false,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.KeyValueDiffers }, { type: i0.NgZone }]; }, propDecorators: { className: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], preserveScrollPosition: [{\n                type: Input\n            }], cursorActivity: [{\n                type: Output\n            }], focusChange: [{\n                type: Output\n            }], scroll: [{\n                type: Output\n            }], drop: [{\n                type: Output\n            }], codeMirrorLoaded: [{\n                type: Output\n            }], ref: [{\n                type: ViewChild,\n                args: ['ref']\n            }] } });\n\nclass CodemirrorModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: CodemirrorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.1\", ngImport: i0, type: CodemirrorModule, declarations: [CodemirrorComponent], exports: [CodemirrorComponent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: CodemirrorModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.1\", ngImport: i0, type: CodemirrorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CodemirrorComponent],\n                    declarations: [CodemirrorComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CodemirrorComponent, CodemirrorModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}